/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClientCM.sep;
/**
 * Richiamo Librerie.
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */
public class Home extends JFrame {
    /**
    * Dichirazione dettagli per la connessione al Database
    */
    static final String DB_URL = "jdbc:postgresql://localhost:5432/ClimateMonitoring";
    static final String DB_USER = "postgres";
    static final String DB_PASS = "password";
    /**
     * Dichiarazione variabili utente registrato
     */
    String user,pass,nomeU,cogU,codFisc,citta;
    long geo;
    /**
     * Dichiarazione variabili per collegamento al server RMI
     */
    static Registry registry;
    static ClimateInterface stub;
     /**
      * Costruttore <strong>base</strong> (senza parametri)
      */
    public Home() {
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Homepage");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Metodo per rendere visibile la finestra
         */ 
        setVisible(true);  
        this.setEnabled(true);
        /**
         * Metodo per bloccare la possibilit√† di ridimensionare la finestra (disabilitato)
         */
        setResizable(false);
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
    }
    /**
     * Metodo per il refresh della finestra
     */
    public void refresh(){
        SwingUtilities.updateComponentTreeUI(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nomeField = new javax.swing.JTextField();
        nomeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lonField = new javax.swing.JTextField();
        latField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        coordButton = new javax.swing.JButton();
        offsetSlide = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        viewOffset = new javax.swing.JFormattedTextField();
        resLabel = new javax.swing.JLabel();
        registrati = new javax.swing.JButton();
        accedi = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        addCentro = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        newLabel = new javax.swing.JLabel();
        addParam = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resTable = new javax.swing.JTable();
        addArea = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Nome");

        nomeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomeFieldKeyPressed(evt);
            }
        });

        nomeButton.setText("Cerca");
        nomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Coordinate");

        lonField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lonFieldActionPerformed(evt);
            }
        });
        lonField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lonFieldKeyPressed(evt);
            }
        });

        latField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latFieldActionPerformed(evt);
            }
        });
        latField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                latFieldKeyPressed(evt);
            }
        });

        jLabel3.setText("Longitudine");

        jLabel4.setText("Latitudine");

        coordButton.setText("Cerca");
        coordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordButtonActionPerformed(evt);
            }
        });

        offsetSlide.setMaximum(50);
        offsetSlide.setValue(5);
        offsetSlide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                offsetSlideStateChanged(evt);
            }
        });
        offsetSlide.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                offsetSlideFocusGained(evt);
            }
        });
        offsetSlide.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                offsetSlideKeyPressed(evt);
            }
        });

        jLabel5.setText("Offset");

        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("~ 50 km");

        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("~ 1 km");

        jFormattedTextField1.setEditable(false);
        jFormattedTextField1.setBorder(new javax.swing.border.MatteBorder(null));
        jFormattedTextField1.setText("CLIMATE MONITORING 2.0.0");
        jFormattedTextField1.setEnabled(false);
        jFormattedTextField1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        jFormattedTextField1.setOpaque(true);
        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField1ActionPerformed(evt);
            }
        });

        viewOffset.setText(String.valueOf(offsetSlide.getValue()));
        viewOffset.setEditable(false);
        viewOffset.setHorizontalAlignment(viewOffset.CENTER);
        viewOffset.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewOffset.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        viewOffset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOffsetActionPerformed(evt);
            }
        });

        resLabel.setVisible(false);

        registrati.setBackground(new java.awt.Color(255, 153, 102));
        registrati.setText("Registrati");
        registrati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registratiActionPerformed(evt);
            }
        });

        accedi.setBackground(new java.awt.Color(153, 255, 153));
        accedi.setText("Accedi");
        accedi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accediActionPerformed(evt);
            }
        });

        logout.setVisible(false);
        logout.setBackground(new java.awt.Color(255, 0, 51));
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        addCentro.setVisible(false);
        addCentro.setForeground(new java.awt.Color(0, 153, 153));
        addCentro.setText("Aggiungi Centro");
        addCentro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCentroActionPerformed(evt);
            }
        });

        cancel.setBackground(new java.awt.Color(255, 51, 51));
        cancel.setText("Canc");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        newLabel.setText("Benvenuto!");

        addParam.setForeground(new java.awt.Color(204, 0, 51));
        addParam.setVisible(false);
        addParam.setText("Aggiungi Parametri");
        addParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParamActionPerformed(evt);
            }
        });

        resTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GeonameID", "Nome", "Stato", "Codice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resTable.getTableHeader().setReorderingAllowed(false);
        resTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(resTable);

        addArea.setVisible(false);
        addArea.setForeground(new java.awt.Color(255, 102, 102));
        addArea.setText("Aggiungi Area");
        addArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAreaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nomeField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(nomeButton))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(offsetSlide, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(58, 58, 58)
                        .addComponent(coordButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(registrati)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(accedi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout)
                        .addGap(24, 24, 24))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(106, 106, 106)
                                        .addComponent(latField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lonField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addCentro)
                                        .addGap(18, 18, 18)
                                        .addComponent(addParam)
                                        .addGap(18, 18, 18)
                                        .addComponent(addArea))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cancel)))
                                .addGap(0, 14, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(newLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(registrati)
                                    .addComponent(accedi)
                                    .addComponent(logout))))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nomeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(latField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(offsetSlide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(viewOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(coordButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(resLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addCentro)
                            .addComponent(addParam)
                            .addComponent(addArea))))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111)))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metodo che al click del bottone esegue la ricerca della localit√† dato il nome (richiama metodo 'cercaAreaGeografica')
     * verifica se manca il nome richiesto
     * @param evt click del bottone
     * Eccezione non gestita
    */
    private void nomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeButtonActionPerformed
        /**
         * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
         */
        clearTable();      
        /**
         * Metodo per rendere visibile la label (n.risultati)
         */
        resLabel.setVisible(true); 
        resLabel.setText("Attendi...");
        /**
         * Verifica corrispondenza nome con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
         */
        if(nomeField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (mancato inserimento)
             */
            JOptionPane.showMessageDialog(null, "Non hai inserito alcun nome!","Errore!", JOptionPane.ERROR_MESSAGE);
            resLabel.setVisible(false);
        }else{
            /**
             * Richiamo funzione cercaAreaGeografica, dato il nome
             */
            cercaAreaGeografica(nomeField.getText());
            /**
             * Creazione label con numero dei risultati trovati
             */
            if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
        }
    }//GEN-LAST:event_nomeButtonActionPerformed
    /**
     * Metodo che al click del bottone esegue la ricerca della localit√† date le coordinate (lat,long) (richiama metodo 'cercaAreaGeografica')
     * verifica se manca una o entrambe le coordiante (validita)
     * @param evt click del bottone
     * @throws NumberFormatException gestione eccezione per coordinate inserite non valide
     */
    private void coordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordButtonActionPerformed
        /**
         * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
         */
        clearTable();
        /**
         * Metodo per rendere visibile la label (risultati)
         */
        resLabel.setVisible(true); 
        resLabel.setText("Attendi...");
        /**
         * Dichiarazione variabili latidutine e longitudine su valore base
         */
        double lat=0,lon=0;
        /**
         * Verifica corrispondenza coordinate con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
         */
        if(latField.getText().equals("") || lonField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
             */
            JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE); 
            resLabel.setVisible(false);
        }else{
            try{
                /**
                 * Estrazione valore longitudine da box d'inserimento
                 */
                lon=Double.parseDouble(lonField.getText());
                /**
                 * Estrazione valore latitudine da box d'inserimento
                 */
                lat =Double.parseDouble(latField.getText());
                /**
                 * Richiamo funzione cercaAreaGeografica, date le coordinate
                 */
                cercaAreaGeografica(lat,lon,offsetSlide.getValue());
                /**
                 * Creazione label con numero dei risultati trovati
                 */
                if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
            }catch(NumberFormatException e){
                /**
                 * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                 */
                JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE);
                /**
                 * Reset valore latitudine,longitudine da box d'inserimento
                 */
                lonField.setText(""); latField.setText("");  resLabel.setText("");   
                /**
                 * Stampa errore su riga di comando, per debug
                 */
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_coordButtonActionPerformed
    /**
     * Metodo non utilizzato
     */
    private void latFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latFieldActionPerformed
        // ...
    }//GEN-LAST:event_latFieldActionPerformed
    /**
     * Metodo non utilizzato
     */
    private void offsetSlideFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_offsetSlideFocusGained
        // ...
    }//GEN-LAST:event_offsetSlideFocusGained
    /**
     * Metodo non utilizzato
     */
    private void lonFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lonFieldActionPerformed
        // ...
    }//GEN-LAST:event_lonFieldActionPerformed
    /**
     * Metodo che al movimento dello slider del range di distanza, delle coordinate, setta il valore dell offset da controllare
     * @param evt movimento dello slider (valore annesso)
     * eccezione non gestita
     */
    private void offsetSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_offsetSlideStateChanged
        viewOffset.setText(String.valueOf(offsetSlide.getValue()));
    }//GEN-LAST:event_offsetSlideStateChanged
    /**
     * Metodo che al click del bottone 'Accesso' crea la finestra di dialogo per l'accesso
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void accediActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accediActionPerformed
        new Accesso(this,true);
    }//GEN-LAST:event_accediActionPerformed
    /**
     * Metodo che al click del bottone 'Registrati' crea la finestra di dialogo per la registrazione
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void registratiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registratiActionPerformed
        new Registrazione(this,true);
    }//GEN-LAST:event_registratiActionPerformed

    /**
     * Metodo che al click del bottone 'Logout' esegue l'uscita dalla modalit√† di operatore con 'privilegi'
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        /**
         * Metodo per non rendere visibile il bottone di 'logout'
         */ 
        logout.setVisible(false);
        /**
         * Metodo per rendere visibile il bottone di 'accedi'
         */ 
        accedi.setVisible(true);
        /**
         * Metodo per rendere visibile il bottone di 'registrazione'
         */ 
        registrati.setVisible(true);
        /**
         * Metodo per non rendere visibile il bottone di 'aggiunta Centro'
         */ 
        addCentro.setVisible(false);
        /**
         * Metodo per non rendere visibile il bottone di 'aggiunta Parametri climatici'
         */ 
        addParam.setVisible(false);
        /**
         * Metodo per non rendere visibile il bottone di 'aggiunta Area Interesse'
         */ 
        addArea.setVisible(false);
        /**
         * Settaggio variabili utente su valore 'null'
         */
        user=null; pass=null; nomeU=null; cogU=null; codFisc=null;
        /**
         * Creazione label con messaggio di benvenuto
         */
        newLabel.setText("Benvenuto!");
        /**
         * Stampa conferma di logout su riga di comando, per debug
         */
        System.out.println("Logout effettuato!");
    }//GEN-LAST:event_logoutActionPerformed
    /**
     * Metodo che al click del bottone 'addCentro' crea la finestra di dialogo per l'aggiunta dei centri di monitoraggio
     * @param evt click del bottone
     * eccezione non gestita
    */
    private void addCentroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCentroActionPerformed
        new CentroMonitoraggio(this,true);
    }//GEN-LAST:event_addCentroActionPerformed
    /**
     * Metodo non utilizzato
     */
    private void viewOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOffsetActionPerformed
        // ...
    }//GEN-LAST:event_viewOffsetActionPerformed
    /**
     * Metodo che al click del bottone 'cancella' elimina i risultati mostrati nella Table 
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        /**
         * Metodo che pulisce la table e imposta su valore ' ' (vuoto)
         */ 
        clearTable();resLabel.setText(""); 
        /**
         * Metodo per non rendere visibile la label (n. risultati)
         */ 
        resLabel.setVisible(false);
        /** 
         * Metodo per settare valori campi su ' ' (vuoto)
         */ 
        offsetSlide.setValue(offsetSlide.getMaximum()/10);
        nomeField.setText("");  latField.setText("");   lonField.setText(""); 
    }//GEN-LAST:event_cancelActionPerformed
    /**
     * Metodo che al click del bottone 'addParam' crea la finestra di dialogo per l'aggiunta dei Parametri climatici
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void addParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParamActionPerformed
        new Parametri(this,true);
    }//GEN-LAST:event_addParamActionPerformed
    /**
     * Metodo che al click del risultato in tabella crea la finestra di dialogo per la visualizzazione (se presenti) dei parametri climatici
     * @param evt click del bottone
     * eccezione non gestita
     */
    private void resTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resTableMouseClicked
        /**
         * Metodo acquisizione GeoNameID per visualizzazione parametri climatici
         */ 
        geo=Long.parseLong((String) resTable.getValueAt(resTable.getSelectedRow(), 0)); 
        citta=(String)resTable.getValueAt(resTable.getSelectedRow(), 1);
        /**
         * Creazione finestra con parametri climatici dato GeoNameID
         */
        new AreaParametri(this,true,geo);
    }//GEN-LAST:event_resTableMouseClicked
    /**
     * Metodo che al click del tasto d'invio da tastiera esegue la ricerca della localit√† dato il nome (richiama metodo 'cercaAreaGeografica')
     * @param evt click della tasteira
     * eccezione non gestita
     */
    private void nomeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            /**
             * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
             */
            clearTable();      
            /**
             * Metodo per rendere visibile la label (n. risultati)
             */
            resLabel.setVisible(true); 
            resLabel.setText("Attendi...");
            /**
             * Verifica corrispondenza nome con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
             */
            if(nomeField.getText().equals("")){
                /**
                 * Generazione finestra di errore con specifica dell'errore (mancato inserimento)
                 */
                JOptionPane.showMessageDialog(null, "Non hai inserito alcun nome!","Errore!", JOptionPane.ERROR_MESSAGE);
            }else{
                /**
                 * Richiamo funzione cercaAreaGeografica, dato il nome
                 */
                cercaAreaGeografica(nomeField.getText());
                /**
                 * Creazione label con numero dei risultati trovati
                 */
                if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
            }
        }
    }//GEN-LAST:event_nomeFieldKeyPressed
    /**
     * Metodo che al click del tasto d'invio da tastiera esegue la ricerca della localit√† date le coordinate (lat,long) (richiama metodo 'cercaAreaGeografica')
     * verifica se manca una o entrambe le coordiante (validita)
     * @param evt click del bottone
     * @throws NumberFormatException gestione eccezione per coordinate inserite non valide
     */
    private void lonFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lonFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            /**
             * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
             */
            clearTable();
            /**
             * Metodo per rendere visibile la label (n. risultati)
             */
            resLabel.setVisible(true); 
            resLabel.setText("Attendi...");
            /**
             * Dichiarazione variabili latidutine e longitudine su valore base
             */
            double lat=0,lon=0;
            /**
             * Verifica corrispondenza coordinate con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
             */
            if(latField.getText().equals("") || lonField.getText().equals("")){
                resLabel.setText("");
                /**
                 * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                 */
                JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE); 
            }else{
                try{
                    /**
                     * Estrazione valore longitudine da box d'inserimento
                     */
                    lon=Double.parseDouble(lonField.getText());
                    /**
                     * Estrazione valore latitudine da box d'inserimento
                     */
                    lat =Double.parseDouble(latField.getText()); 
                    /**
                     * Richiamo funzione cercaAreaGeografica, date le coordinate
                     */
                    cercaAreaGeografica(lat,lon,offsetSlide.getValue());
                    /**
                     * Creazione label con numero dei risultati trovati
                     */
                    if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
                }catch(NumberFormatException e){
                    /**
                     * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                     */
                    JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE);
                    /**
                     * Reset valore latitudine,longitudine da box d'inserimento
                     */
                    lonField.setText(""); latField.setText("");  resLabel.setText("");   
                    /**
                     * Stampa errore su riga di comando, per debug
                     */
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_lonFieldKeyPressed
    /**
     * Metodo che al click dello slider (da tastiera) del range di distanza, delle coordinate, setta il valore dell'offset da controllare e cerca le coordinate inserite
     * @param evt movimento dello slider (valore annesso)
     * @throws NumberFormatException gestione eccezione per coordinate inserite non valide
     */
    private void offsetSlideKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_offsetSlideKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            /**
             * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
             */
            clearTable();
            /**
             * Metodo per rendere visibile la label (n. risultati)
             */
            resLabel.setVisible(true); 
            resLabel.setText("Attendi...");
            /**
             * Dichiarazione variabili latidutine e longitudine su valore base
             */
            double lat=0,lon=0;
            /**
             * Verifica corrispondenza coordinate con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
             */
            if(latField.getText().equals("") || lonField.getText().equals("")){
                resLabel.setText("");
                /**
                 * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                 */
                JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE); 
            }else{
                try{
                    /**
                     * Estrazione valore longitudine da box d'inserimento
                     */
                    lon=Double.parseDouble(lonField.getText());
                    /**
                     * Estrazione valore latitudine da box d'inserimento
                     */
                    lat =Double.parseDouble(latField.getText());
                    /**
                     * Richiamo funzione cercaAreaGeografica, date le coordinate (e eventuale offset)
                     */
                    cercaAreaGeografica(lat,lon,offsetSlide.getValue());
                    /**
                     * Creazione label con numero dei risultati trovati
                     */
                    if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
                }catch(NumberFormatException e){
                    /**
                     * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                     */
                    JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE);
                    /**
                     * Reset valore latitudine,longitudine da box d'inserimento
                     */
                    lonField.setText(""); latField.setText("");  resLabel.setVisible(false);   
                    /**
                     * Stampa errore su riga di comando, per debug
                     */
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_offsetSlideKeyPressed
    /**
     * Metodo che al click del tasto d'invio da tastiera esegue la ricerca della localit√† date le coordinate (lat,long) (richiama metodo 'cercaAreaGeografica')
     * verifica se manca una o entrambe le coordiante (validita)
     * @param evt click del bottone
     * @throws NumberFormatException gestione eccezione per coordinate inserite non valide
     */
    private void latFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_latFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            /**
             * Pulisce la tabella di visualizzazione se presenti risultati da precedenti di ricerca
             */
            clearTable();
            /**
             * Metodo per rendere visibile la label (n. risultati)
             */
            resLabel.setVisible(true); 
            resLabel.setText("Attendi...");
            /**
             * Dichiarazione variabili latidutine e longitudine su valore base
             */
            double lat=0,lon=0;
            /**
             * Verifica corrispondenza coordinate con valore ' ' (vuoto) e restituzione errore in case di risultato = 'vero'
             */
            if(latField.getText().equals("") || lonField.getText().equals("")){
                resLabel.setText("");
                /**
                 * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                 */
                JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE); 
            }else{
                try{
                    /**
                     * Estrazione valore longitudine da box d'inserimento
                     */
                    lon=Double.parseDouble(lonField.getText());
                    /**
                     * Estrazione valore latitudine da box d'inserimento
                     */
                    lat =Double.parseDouble(latField.getText()); 
                    /**
                     * Richiamo funzione cercaAreaGeografica, date le coordinate (e eventuale offset)
                     */
                    cercaAreaGeografica(lat,lon,offsetSlide.getValue());
                    /**
                     * Creazione label con numero dei risultati trovati
                     */
                    if(resTable.getRowCount()==1){ resLabel.setText(resTable.getRowCount()+" risultato trovato");}else{resLabel.setText(resTable.getRowCount()+" risultati trovati");}
                }catch(NumberFormatException e){
                    /**
                     * Generazione finestra di errore con specifica dell'errore (coordinate non valide)
                     */
                    JOptionPane.showMessageDialog(null, "Coordinate non valide!","Errore!", JOptionPane.ERROR_MESSAGE);
                    /**
                     * Reset valore latitudine,longitudine da box d'inserimento
                     */
                    lonField.setText(""); latField.setText("");  resLabel.setText("");
                    /**
                     * Stampa errore su riga di comando, per debug
                     */
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_latFieldKeyPressed

    private void addAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAreaActionPerformed
        new AreaInt(this, true);
    }//GEN-LAST:event_addAreaActionPerformed

    private void jFormattedTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField1ActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /**
         * Creazione e visualizzazione della pagina Home
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /**
                 * Metodo per rendere visibile la finestra Home
                 */
                new Home().setVisible(true);
                try {
                    registry = LocateRegistry.getRegistry("localhost", 1099);
                    stub = (ClimateInterface) registry.lookup("ClimateMonitoring");
                } catch (RemoteException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NotBoundException ex) {
                    Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            }
        });
    }
    
    /**
     * Metodo per la ricerca dell'Area Geografica dato il nome
     * @param nome stringa, il nome della localit√† da ricercare
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */
    public void cercaAreaGeografica(String nome){
        try {
            List<Map<String, String>> results = stub.cercaAreaGeograficaDB(nome);

            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Non √® stato trovato alcun risultato!", "Errore di ricerca", JOptionPane.ERROR_MESSAGE);
            } else {
                for (Map<String, String> row : results) {
                    String id = row.get("GeoNameID");
                    String nomeArea = row.get("Name");
                    String nomeStato = row.get("CountryName");
                    String codiceStato = row.get("CountryCode");

                    addRowTable(new String[]{id, nomeArea, nomeStato, codiceStato});
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Remote Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Metodo per la ricerca dell'Area Geografica date le coordinate (e eventuale offset)
     * @param lat double, valore della latitudine da ricercare
     * @param lon double, valore della longitudine da ricercare
     * @param offset double, valore dell'eventuale offset in cui ricercare
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */
    public static void cercaAreaGeografica(double lat, double lon, int offset){
        try {
            List<Map<String, String>> results = stub.cercaAreaGeograficaDB(lat, lon, offset);

            if (results.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Non sono state trovate aree nelle vicinanze", "Errore di ricerca", JOptionPane.ERROR_MESSAGE);
            }else{
                for (Map<String, String> row : results) {
                    String id = row.get("GeoNameID");
                    String nomeArea = row.get("Name");
                    String nomeStato = row.get("CountryName");
                    String codiceStato = row.get("CountryCode");

                    addRowTable(new String[]{id, nomeArea, nomeStato, codiceStato});
                }
            }
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Remote Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Metodo aggiunta righe alla tabella dei risultati della ricerca
     * @param dataRow string, array di Stringhe passate dall'estrazione da file
     * Nessuna eccezione gestita
     */
    public static void addRowTable(String[] dataRow){
        model = (DefaultTableModel)resTable.getModel();
        model.addRow(dataRow);
    }
    /**
     * Metodo per svuotare la tabella
     * Senza parametri perch√© recuperati dalle TextField
     * Nessuna eccezione gestita
     */
    public static void clearTable(){
        model = (DefaultTableModel)resTable.getModel();
        model.setRowCount(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton accedi;
    protected javax.swing.JButton addArea;
    public javax.swing.JButton addCentro;
    public javax.swing.JButton addParam;
    private javax.swing.JButton cancel;
    private javax.swing.JButton coordButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField latField;
    public javax.swing.JButton logout;
    private javax.swing.JTextField lonField;
    public javax.swing.JLabel newLabel;
    private javax.swing.JButton nomeButton;
    private javax.swing.JTextField nomeField;
    private javax.swing.JSlider offsetSlide;
    public javax.swing.JButton registrati;
    private javax.swing.JLabel resLabel;
    private static javax.swing.JTable resTable;
    private javax.swing.JFormattedTextField viewOffset;
    // End of variables declaration//GEN-END:variables
    private static DefaultTableModel model;
}
