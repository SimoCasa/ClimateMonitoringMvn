/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package climatemonitoring;
/**
 * Importazione del separatore dalla classe main 'ClimateMonitor'
 */
import static climatemonitoring.ClimateMonitor.sep;
import static climatemonitoring.Home.DB_PASS;
import static climatemonitoring.Home.DB_URL;
import static climatemonitoring.Home.DB_USER;
/**
 * Richiamo Librerie di Java
 */
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */
public class Accesso extends javax.swing.JDialog {
     /**
      * Creo oggetto di nome 'hh' di tipo 'Home' 
      * Creo una finistra speculare alla Home, in versione 'Operatore' con privilegi e funzioni aggiuntive.
      */
    Home hh;
     /**
      * Costruttore <strong>base</strong> (senza parametri)
      */
     public Accesso(){}
     
     /**
      * Costruttore <strong>parametrizzato</strong> per bloccare la finestra sottostante
      * @param hh oggetto, di tipo 'Home'
      * @param ck boolean, da classe finestra home 'base'
      */
     public Accesso(Home hh, boolean ck){
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(hh,ck);
        /**
         * 'This' per puntare al riferimento di una oggetto presente nella classe corrente
         */
        this.hh = hh;
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Accedi");
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
        /**
         * Metodo per rendere visibile la finestra
         */
        setVisible(true);
    }
    
    /**
     * Creates new form Login
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        Accedi = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 204, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ACCEDI");

        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });
        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameFieldKeyPressed(evt);
            }
        });

        Accedi.setBackground(new java.awt.Color(255, 255, 204));
        Accedi.setForeground(new java.awt.Color(102, 102, 102));
        Accedi.setText("Accedi");
        Accedi.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Accedi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccediActionPerformed(evt);
            }
        });
        Accedi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AccediKeyPressed(evt);
            }
        });

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(passwordField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(12, 12, 12)))
                .addGap(114, 114, 114))
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(Accedi)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(Accedi)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Non utilizzato
     */
    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        //...
    }//GEN-LAST:event_usernameFieldActionPerformed
    /**
     * Metodo che al click del bottone esegue la ricerca username e passoword per l'accesso (richiama metodo 'Accedi')
     * verifica se mancano parte delle credenziali richieste, o entrambe 
     * nel caso manchino restituisce un pannello con l'errore
     * @param evt click del bottone
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */
    private void AccediActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccediActionPerformed
        /**
         * Gestione errori in caso di mancata compilazione dei parametri richiesti, da parte dell'utente
         */
        if(passwordField.getText().equals("") & usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Crendenziali mancati, entrambe mancanti)
             */
            JOptionPane.showMessageDialog(null, "Credenziali mancanti!","Errore!", JOptionPane.ERROR_MESSAGE);
        } else if(passwordField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Password mancante)
             */
            JOptionPane.showMessageDialog(null, "Password mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }else if(usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Username mancante)
             */
            JOptionPane.showMessageDialog(null, "Username mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }
        else{
            /**
             * Se non presenti errori in fase di inserimento, da parte dell'utente
             * Esecuzione funzione per l'accesso, all'interno di un 'Try' per evitare l'innalzamento di eccezioni
             */
            try {
                /**
                 * Richiamo funzione accesso
                 */
                accedi();
            } catch (IOException ex) {
                /**
                 * Cattura errore in caso di mancato funzionamento del metodo 'accedi'
                 */
                Logger.getLogger(Accesso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_AccediActionPerformed
    /**
     * Ascoltatore con implementazione della tastiera
     */
    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_passwordFieldKeyPressed

    private void usernameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_usernameFieldKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_formKeyPressed

    private void AccediKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AccediKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){log();}
    }//GEN-LAST:event_AccediKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accesso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /**
         * Creazione e visualizzazione della pagina di inserimento dati d'accesso 
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /*Metodo per rendere visibile la finestra d'accesso*/
                new Accesso().setVisible(true);
            }
        });
    }
    private static boolean auth;
    
    /**
     * Metodo preliminare per l'accesso (richiama metodo 'Accedi')
     * verifica se mancano parte delle credenziali richieste, o entrambe 
     * nel caso manchino restituisce un pannello con l'errore
     * Senza parametri perché recuperati dalle TextField
     * Gestita eccezione: IOException eccezione per mancanza file, directory errata
     */

    public void log(){
         /**
          * Gestione errori in caso di mancata compilazione dei parametri richiesti, da parte dell'utente
          */
        if(passwordField.getText().equals("") & usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Crendenziali mancati, entrambe mancanti)
             */
            JOptionPane.showMessageDialog(null, "Credenziali mancanti!","Errore!", JOptionPane.ERROR_MESSAGE);
        } else if(passwordField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Password mancante)
             */
            JOptionPane.showMessageDialog(null, "Password mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }else if(usernameField.getText().equals("")){
            /**
             * Generazione finestra di errore con specifica dell'errore (Username mancante)
             */
            JOptionPane.showMessageDialog(null, "Username mancante!","Errore!", JOptionPane.ERROR_MESSAGE);
        }
        else{
            /**
             * Se non presenti errori in fase di inserimento, da parte dell'utente
             * Esecuzione funzione per l'accesso, all'interno di un 'Try' per evitare l'innalzamento di eccezioni
             */
            try {
                /**
                 * Richiamo funzione accesso
                 */
                accedi();
            } catch (IOException ex) {
                /**
                 * Cattura errore in caso di mancato funzionamento del metodo 'accedi'
                 */
                Logger.getLogger(Accesso.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * Metodo per l'Accesso, forniti lo username e password 
     * verifica se all'interno del file 'OperatoriRegistrati.dati' è presente la combinazione username+password
     * se presente esegue il login rendendo visibili gli elementi una volta loggato
     * con implementazione dell'eccezioni (se presenti)
     * Senza parametri perché recuperati dalle TextField
     * @throws IOException eccezione per mancanza file, directory errata
     */
    public void accedi() throws IOException{
        /**
         * Imposto la linea e il lettore su valore 'nullo' iniziale
         */
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);

            String sql = "SELECT nome, cognome, codfisc FROM operatori WHERE userid = ? AND password = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, usernameField.getText());
            stmt.setString(2, new String(passwordField.getPassword()));

            rs = stmt.executeQuery();

            if (rs.next()) {
                // Login effettuato
                String nome = rs.getString("nome");
                String cognome = rs.getString("cognome");
                String codfisc = rs.getString("codfisc");

                hh.logout.setVisible(true);
                hh.accedi.setVisible(false);
                hh.registrati.setVisible(false);
                hh.addCentro.setVisible(true);
                hh.addParam.setVisible(true);
                hh.addArea.setVisible(true);

                hh.nomeU = nome;
                hh.cogU = cognome;
                hh.codFisc = codfisc;

                hh.newLabel.setText("Benvenuto " + nome + " " + cognome);

                this.dispose();
                } else {
                    // Credenziali errate
                    JOptionPane.showMessageDialog(null, "Le credenziali sono errate!", "Errore!", JOptionPane.ERROR_MESSAGE);
                }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Errore di connessione al database!", "Errore!", JOptionPane.ERROR_MESSAGE);
                } finally {
                    try {
                        if (rs != null) rs.close();
                        if (stmt != null) stmt.close();
                        if (conn != null) conn.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Accedi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
