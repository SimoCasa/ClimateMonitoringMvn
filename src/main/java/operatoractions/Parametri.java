/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 * Richiamo origine progetto.
 */
package operatoractions;
/**
 * Richiamo Librerie.
 */
import access.Registrazione;
import climatemonitoring.ClientCM;
import climatemonitoring.ClimateInterface;
import java.awt.Color;
import org.jdatepicker.impl.UtilDateModel;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import org.jdatepicker.JDatePicker;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;

/**
 * @author 753546 Badrous Giorgio William
 * @author 753540 Casati Simone
 * @author 754772 Biavaschi Raffaele
 * @author 755531 Bonacina Davide
 */

public final class Parametri extends JDialog {
/**
     * Dichirazione variabili per controllo di eventuali errori di conversione
     */
        public String IDAREA = null;
    /**
     * Dichiarazione variabili per collegamento al server RMI
     */
    static Registry registry;
    static ClimateInterface stub;
    /**
     * Variabile oggetto di tipo 'Home'
     */
    ClientCM reg;
    /**
     * Costruttore <strong>base</strong> (senza parametri)
     */
    public Parametri(){}
    /**
     * Costruttore <strong>parametrizzato</strong>
     * @param reg oggetto, di tipo 'Home'
     * @param ck boleean, del costuttore per eventuali errori
     */
    public Parametri(ClientCM reg, boolean ck) {
        /**
         * 'Super' per puntare alla classe genitore, da cui eredito metodi e parametri
         */
        super(reg,ck);
        /**
         * 'This' per puntare al riferimento di una oggetto presente nella classe corrente
         */
        this.reg = reg;
        /**
         * 'This' per puntare al riferimento di una metodo presente nella classe corrente (setto titolo)
         */
        this.setTitle("Inserisci Parametri");
        /**
         * Metodi per eseguire il setting del client e visualizzare gli elementi della dropdown
         */
        try {
            setClient();
        } catch (NotBoundException ex) {
            Logger.getLogger(Registrazione.class.getName()).log(Level.SEVERE, null, ex);
        }
        /**
         * Metodo base di Netbeans (Swing designer, parte grafica) per inizializzare il componente
         */
        initComponents();
        
        /**
         * Metodo per recuperare la dimensione del display, per creare una finestra coerente
         */
        Dimension dim = getToolkit().getScreenSize();
        /**
         * Metodo per posizione la finestra
         */
        this.setLocation(dim.width / 2 - this.getWidth() / 2, dim.height / 2 - this.getHeight() / 2);
        /**
         * Metodo per rendere visibile la finestra
         */ 
        setVisible(true);
        /**
         * Metodo per bloccare la possibilità di ridimensionare la finestra
         */
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ventoField = new javax.swing.JTextField();
        umiditaField = new javax.swing.JTextField();
        pressioneField = new javax.swing.JTextField();
        centriDrop = new javax.swing.JComboBox<>();
        areaDrop = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        inserisci = new javax.swing.JButton();
        precipitazioniField = new javax.swing.JTextField();
        altField = new javax.swing.JTextField();
        massField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        temperaturaField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        noteVento = new javax.swing.JTextField();
        noteUmidita = new javax.swing.JTextField();
        noteTemperatura = new javax.swing.JTextField();
        notePressione = new javax.swing.JTextField();
        notePrecipitazioni = new javax.swing.JTextField();
        noteAltitudine = new javax.swing.JTextField();
        noteMassa = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();
        timestampLabel = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 102));
        jLabel1.setText("Aggiungi Parametri");

        jLabel2.setText("Area di Interesse");

        jLabel3.setText("Centro Monitoraggio");

        jLabel4.setText("Vento");

        jLabel5.setText("Umidità");

        centriDrop.addItem("");
        centroANDareaDropInitialize();

        jLabel9.setText("Pressione");

        jLabel10.setText("Temperatura");

        jLabel11.setText("Precipitazioni");

        jLabel12.setText("Altitudine Ghiacciai");

        jLabel13.setText("Massa Ghiacciai");

        inserisci.setText("Inserisci");
        inserisci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserisciActionPerformed(evt);
            }
        });

        jLabel6.setText("km/h");

        jLabel7.setText("%");

        jLabel8.setText("hPa");

        jLabel15.setText("°C");

        jLabel16.setText("mm");

        jLabel17.setText("m");

        jLabel18.setText("kg");

        jLabel19.setText("-");

        jLabel20.setText("-");

        jLabel21.setText("-");

        jLabel22.setText("-");

        jLabel23.setText("-");

        jLabel24.setText("-");

        jLabel25.setText("-");

        jLabel26.setText("Note");

        jLabel27.setText("Data:");

        dateField.setForeground(new java.awt.Color(153, 153, 153));
        dateField.setText("Data");
        dateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dateFieldMouseClicked(evt);
            }
        });

        getTimestamp();

        timeField.setForeground(new java.awt.Color(153, 153, 153));
        timeField.setText("Ora");
        timeField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timeFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(179, 179, 179))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timestampLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel27))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(centriDrop, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(altField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(precipitazioniField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pressioneField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(umiditaField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ventoField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(areaDrop, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(massField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(temperaturaField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(49, 49, 49)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(noteTemperatura, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                    .addComponent(noteUmidita, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                    .addComponent(noteVento)
                                    .addComponent(notePressione, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                                    .addComponent(notePrecipitazioni)
                                    .addComponent(noteMassa)
                                    .addComponent(noteAltitudine)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(47, 47, 47))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(inserisci)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(centriDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(areaDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(ventoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel19)
                            .addComponent(noteVento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(umiditaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(noteUmidita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pressioneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8)
                    .addComponent(notePressione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel15)
                    .addComponent(temperaturaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteTemperatura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(precipitazioniField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(notePrecipitazioni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(altField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(noteAltitudine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(massField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(noteMassa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inserisci)
                    .addComponent(jLabel27)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timestampLabel)
                .addGap(8, 8, 8))
        );

        try {
            setClient();
        }catch (NotBoundException ex) {
            Logger.getLogger(Registrazione.class.getName()).log(Level.SEVERE, null, ex);
        }

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metodo che al click del bottone esegue l'inserimento dei parametri della località scelta (richiama metodi 'calcoli degli score')
     * verifica se mancano i parametri richiesti
     * @param evt click del bottone
     * @throws Exception eccezione generica
     */
    private void inserisciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserisciActionPerformed
        /**
         * Variabili impostate su valore iniziale
         */
       inserisciParametriClimatici();
    }//GEN-LAST:event_inserisciActionPerformed

    private void dateFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateFieldMouseClicked
        UtilDateModel model = new UtilDateModel();
        Properties properties = new Properties();
        properties.put("text.today", "Today");
        properties.put("text.month", "Month");
        properties.put("text.year", "Year");

        JDatePanelImpl datePanel = new JDatePanelImpl(model, properties);
        JDatePicker datePicker = new JDatePickerImpl(datePanel, null);
        int result = JOptionPane.showConfirmDialog(null, datePicker, "Seleziona la Data", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            Date selectedDate = (Date) datePicker.getModel().getValue();
            if (selectedDate != null) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                dateField.setText(dateFormat.format(selectedDate));
                dateField.setForeground(Color.BLACK);
            }
        } else {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            dateField.setText(dateFormat.format(new Date()));
            dateField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_dateFieldMouseClicked

    private void timeFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timeFieldMouseClicked
        SpinnerDateModel timeModel = new SpinnerDateModel();
        JSpinner timeSpinner = new JSpinner(timeModel);
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner, "HH:mm:ss");
        timeSpinner.setEditor(timeEditor);
        timeField.setForeground(Color.GRAY);
        int result = JOptionPane.showConfirmDialog(this, timeSpinner, "Seleziona l'Ora", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            Date selectedTime = (Date) timeSpinner.getValue();
            SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
            timeField.setText(timeFormat.format(selectedTime));
            timeField.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_timeFieldMouseClicked
    /**
     * Metodo esegue l'inserimento dei parametri della località scelta (richiama metodi 'calcoli degli score')
     * verifica se mancano i parametri richiesti
     * inserisce utilizzando il metodo 'inserisciParametriClimatici' presente su 'ServerCM'
     */
    public void inserisciParametriClimatici(){
        boolean check = true;
        ArrayList<String> errore = new ArrayList<>();
        int c = 0;

        if (centriDrop.getSelectedItem() == null || centriDrop.getSelectedItem().toString().isEmpty()) { check = false; errore.add("Centro Monitoraggio"); c++; }
        if (areaDrop.getSelectedItem() == null || areaDrop.getSelectedItem().toString().isEmpty()) { check = false; errore.add("Area Interesse"); c++; }
        if (ventoField.getText().isEmpty()) { check = false; errore.add("Vento"); c++; }
        if (umiditaField.getText().isEmpty()) { check = false; errore.add("Umidità"); c++; }
        if (pressioneField.getText().isEmpty()) { check = false; errore.add("Pressione"); c++; }
        if (temperaturaField.getText().isEmpty()) { check = false; errore.add("Temperatura"); c++; }
        if (precipitazioniField.getText().isEmpty()) { check = false; errore.add("Precipitazioni"); c++; }
        if (altField.getText().isEmpty()) { check = false; errore.add("Altitudine Ghiacciai"); c++; }
        if (massField.getText().isEmpty()) { check = false; errore.add("Massa Ghiacciai"); c++; }

        if (!check) {
            StringBuilder f = new StringBuilder("Non hai inserito:");
            for (String s : errore) { f.append("\n-").append(s); }
            JOptionPane.showMessageDialog(null, f.toString(), "Errore!", JOptionPane.ERROR_MESSAGE);
        } else {
            String nomeCentro = centriDrop.getSelectedItem().toString();
            String nomeArea = areaDrop.getSelectedItem().toString();
            boolean ctrl=true;
            //TRASFORMO IN INTERI
            int vento = 0,umidita = 0,pressione = 0,temperatura = 0,precipitazioni = 0,alt = 0,mass = 0;
            try{
                if (!ventoField.getText().isEmpty() || ventoField.getText().matches("\\d+")) {
                    vento = calcolaScoreVento(Integer.parseInt(ventoField.getText()));
                    if(vento==-1){ctrl=false;}
                }
                if (!umiditaField.getText().isEmpty() && umiditaField.getText().matches("\\d+")) {
                    umidita = calcolaScoreUmidita(Integer.parseInt(umiditaField.getText()));
                    if(umidita==-1){ctrl=false;}
                }
                if (!pressioneField.getText().isEmpty() && pressioneField.getText().matches("\\d+")) {
                    pressione = calcolaScorePressione(Integer.parseInt(pressioneField.getText()));
                    if(pressione==-1){ctrl=false;}
                }
                if (!temperaturaField.getText().isEmpty() && temperaturaField.getText().matches("\\d+")) {
                    temperatura = calcolaScoreTemperatura(Integer.parseInt(temperaturaField.getText()));
                    if(temperatura==-1){ctrl=false;}
                }
                if (!precipitazioniField.getText().isEmpty() && precipitazioniField.getText().matches("\\d+")) {
                    precipitazioni = calcolaScorePrecipitazioni(Integer.parseInt(precipitazioniField.getText()));
                    if(precipitazioni==-1){ctrl=false;}
                }
                if (!altField.getText().isEmpty() && altField.getText().matches("\\d+")) {
                    alt = calcolaScorePressione(Integer.parseInt(altField.getText()));
                    if(alt==-1){ctrl=false;}
                }
                if (!massField.getText().isEmpty() && massField.getText().matches("\\d+")) {
                    mass = calcolaScoreTemperatura(Integer.parseInt(massField.getText()));
                    if(mass==-1){ctrl=false;}
                }
            }catch(NumberFormatException e){check=false;JOptionPane.showMessageDialog(null, "Inserisci coordinate corrette! ","Errore!", JOptionPane.ERROR_MESSAGE);}
            
            Timestamp data = null;
            if(isValidDate(dateField.getText()) && isValidTime(timeField.getText())){
                data = getUserSelectedDateTime();
                check=true;
            }else{check=false;}
            
            try {
                if(check && ctrl){
                    stub.inserisciParametriClimatici(nomeCentro, nomeArea, vento, umidita, pressione, temperatura, precipitazioni, alt, mass, noteVento.getText(), data, noteUmidita.getText(),notePressione.getText(), noteTemperatura.getText(), notePrecipitazioni.getText(), noteAltitudine.getText(),noteMassa.getText());
                    JOptionPane.showMessageDialog(null, "Inserimento effettuato con successo!", "Successo!", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                }
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(null, "Errore di connessione al server RMI: \n" + ex.getMessage(), "Errore", JOptionPane.ERROR_MESSAGE);
            } catch(NullPointerException e){
                JOptionPane.showMessageDialog(null, "Stub del server non collegato!", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Metodo per il calcolo del punteggio del vento
     * @param vento intero, valore del vento
     * @return valore score_vento
     * Eccezioni non gestite
     */
    public static int calcolaScoreVento(int vento) {
        int score_vento=0;
        if (vento >= 1 && vento <= 10) {
            score_vento=1;
        } else if (vento <= 20) {
            score_vento=2;
        } else if (vento <= 30) {
            score_vento=3;
        } else if (vento <= 60) {
            score_vento=4;
        } else if (vento <= 120) {
            score_vento=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per il vento non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        return score_vento;
    }
    /**
     * Metodo per il calcolo del punteggio dell'umidita
     * @param umidita intero, valore dell'umidita
     * @return valore score_umidita
     * Eccezioni non gestite
     */
    public static int calcolaScoreUmidita(int umidita) {
        int score_umidita;
        if (umidita >= 0 && umidita <= 20) {
            score_umidita=1;
        } else if (umidita <= 40) {
            score_umidita=2;
        } else if (umidita <= 60) {
            score_umidita=3;
        } else if (umidita <= 80) {
            score_umidita=4;
        } else if (umidita <= 100) {
            score_umidita=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per l'umidità non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        return score_umidita;
    }
    /**
     * Metodo per il calcolo del punteggio della pressione
     * @param pressione intero, valore della pressione
     * @return valore score_pressione
     * Eccezioni non gestite
     */
    public static int calcolaScorePressione(int pressione) {
        int score_pressione;
        if (pressione >= 970 && pressione <= 1000) {
            score_pressione=1;
        } else if (pressione <= 1015) {
            score_pressione=2;
        } else if (pressione <= 1023) {
            score_pressione=3;
        } else if (pressione <= 1034) {
            score_pressione=4;
        } else if (pressione <= 1047) {
            score_pressione=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per la pressione non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        return score_pressione;
    }
    /**
     * Metodo per il calcolo del punteggio della temperatura
     * @param temperatura intero, valore della temperatura
     * @return valore score_temperatura
     * Eccezioni non gestite
     */
    public static int calcolaScoreTemperatura(int temperatura) {
        int score_temperatura;
        if (temperatura >= -30 && temperatura <= -15) {
            score_temperatura=1;
        } else if (temperatura <= 0) {
            score_temperatura=2;
        } else if (temperatura <= 15) {
            score_temperatura=3;
        } else if (temperatura <= 30) {
            score_temperatura=4;
        } else if (temperatura <= 45) {
            score_temperatura=5;
        } else {
           JOptionPane.showMessageDialog(null, "Valore inserito per la temperatura non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
           return -1;
        }
        return score_temperatura;
    }
    /**
     * Metodo per il calcolo del punteggio delle precipitazioni
     * @param precipitazioni intero, valore delle precipitazioni
     * @return valore score_precipitazioni
     * Eccezioni non gestite
     */
    public static int calcolaScorePrecipitazioni(int precipitazioni) {
        int score_precipitazioni;
        if (precipitazioni >= 1 && precipitazioni <= 2) {
            score_precipitazioni=1;
        } else if (precipitazioni <= 4) {
            score_precipitazioni=2;
        } else if (precipitazioni <= 6) {
            score_precipitazioni=3;
        } else if (precipitazioni <= 8) {
            score_precipitazioni=4;
        } else if (precipitazioni <= 12) {
            score_precipitazioni=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per le precipitazioni non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        return score_precipitazioni;
    }
    /**
     * Metodo per il calcolo del punteggio dell'altitudine
     * @param altitudineGhiacciai intero, valore dell'altitudine
     * @return valore score_altitudine_ghiacciai
     * Eccezioni non gestite
     */
    public static int calcolaScoreAltitudineGhiacciai(int altitudineGhiacciai) {
        int score_altitudine_ghiacciai;
        if (altitudineGhiacciai >= 0 && altitudineGhiacciai <= 200) {
            score_altitudine_ghiacciai=1;
        } else if (altitudineGhiacciai <= 400) {
            score_altitudine_ghiacciai=2;
        } else if (altitudineGhiacciai <= 600) {
            score_altitudine_ghiacciai=3;
        } else if (altitudineGhiacciai <= 800) {
            score_altitudine_ghiacciai=4;
        } else if (altitudineGhiacciai <= 1000) {
            score_altitudine_ghiacciai=5;
        } else {
            JOptionPane.showMessageDialog(null, "Valore inserito per l'altidudine dei ghiacciai non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        return score_altitudine_ghiacciai;
    }
    /**
     * Metodo per il calcolo del punteggio della massa
     * @param massaGhiacciai intero, valore della massa
     * @return valore score_massa_ghiacciai
     * Eccezioni non gestite
     */
    public static int calcolaScoreMassaGhiacciai(int massaGhiacciai) {
        int score_massa_ghiacciai;
        if (massaGhiacciai >= 0 && massaGhiacciai <= 200) {
            score_massa_ghiacciai=1;
        } else if (massaGhiacciai <= 400) {
            score_massa_ghiacciai=2;
        } else if (massaGhiacciai <= 600) {
            score_massa_ghiacciai=3;
        } else if (massaGhiacciai <= 800) {
            score_massa_ghiacciai=4;
        } else if (massaGhiacciai <= 1000) {
            score_massa_ghiacciai=5;
        } else {
           JOptionPane.showMessageDialog(null, "Valore inserito per la massa dei ghiacciai non valido!","Errore!", JOptionPane.ERROR_MESSAGE);
           return -1;
        }
        return score_massa_ghiacciai;
    }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registrazione.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /**
         * Creazione e visualizzazione del form di inserimento (per inserimento valori) 
         */
        java.awt.EventQueue.invokeLater(() -> {
            /**
             * Metodo per rendere visibile la finestra d'inserimento
             */
            new Registrazione().setVisible(true);
        });
    }
    /**
     * Metodo per settare la DropDown 'CentriDrop' sui valori presenti in DB
     * verifica la presenza dei centri usando il metodo 'getCentriMonitoraggio' presente su 'ServerCM'
     * @throws java.rmi.RemoteException
     */
    private void centroANDareaDropInitialize() {
        try {
            List<String> centri = stub.getCentriMonitoraggio(reg.codFisc);
            centriDrop.removeAllItems();
            centriDrop.addItem(""); // Aggiunge un elemento vuoto come prima opzione
            for (String centro : centri) {
                centriDrop.addItem(centro);
                //System.out.println(centro);
            }

            centriDrop.addActionListener((ActionEvent e) -> {
                // Rimuove la selezione automatica del primo elemento
                if (!centriDrop.getSelectedItem().toString().isEmpty()) {
                    areaDrop.setEnabled(false);
                    areaDrop.removeAllItems();
                    String nomeCentro = (String) centriDrop.getSelectedItem();
                    if (nomeCentro != null) {
                        try {
                            List<String> aree = stub.getAreeInteresse(nomeCentro);
                            for (String area : aree) {
                                areaDrop.addItem(area);
                            }
                            areaDrop.setEnabled(true);
                        } catch (RemoteException ex) {
                            JOptionPane.showMessageDialog(null, "Errore durante il recupero delle aree di interesse", "Errore!", JOptionPane.ERROR_MESSAGE);
                            this.dispose();
                        }
                    }
                } else {
                    areaDrop.removeAllItems(); // Rimuove tutti gli elementi
                    areaDrop.addItem(""); // Aggiunge un elemento vuoto
                    areaDrop.setSelectedIndex(0); // Seleziona l'elemento vuoto
                    areaDrop.setEnabled(false); // Disabilita areaDrop se nessun centro è selezionato
                }
            });

            // Disabilita areaDrop inizialmente
            areaDrop.setEnabled(false);

        } catch (RemoteException e) {
            JOptionPane.showMessageDialog(null, "Errore durante il recupero dei centri di monitoraggio", "Errore!", JOptionPane.ERROR_MESSAGE);
            dispose();
        }
    }
    /**
     * Metodo per settare il 'Client' che accede ai metodi del 'ServerCM'
     * Indirizzo: localHost Porta: 1099
     * con implementazione dell'eccezioni (se presenti)
     * @throws java.rmi.RemoteException
     * @throws java.rmi.NotBoundException
     */
    void setClient() throws NotBoundException {
        try {
            registry = LocateRegistry.getRegistry("localhost", 1099);
            stub = (ClimateInterface) registry.lookup("ClimateMonitoring");
            System.out.println("Stub inizializzato con successo.");
        } catch (RemoteException | NotBoundException e) {
            JOptionPane.showMessageDialog(null, "Errore di connessione al server RMI: \n" + e.getMessage(), "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void getTimestamp() {
        // Ottenere il timestamp corrente
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedTimestamp = now.format(formatter);

        // Impostare il testo del JLabel
        timestampLabel.setText(formattedTimestamp);
    }
    
    private Timestamp getUserSelectedDateTime(){
        String dateTimeString = dateField.getText() + " " + timeField.getText();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return Timestamp.valueOf(LocalDateTime.parse(dateTimeString, formatter));
    }
    
    private boolean isValidDate(String dateStr) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false); // Parsing rigoroso
        try {
            dateFormat.parse(dateStr);
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Il campo data non è formattato correttamente, usa 'yyyy-MM-dd' per la data.\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    private boolean isValidTime(String timeStr) {
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
        timeFormat.setLenient(false); // Parsing rigoroso
        try {
            timeFormat.parse(timeStr);
            return true;
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Il campo ora non è formattato correttamente, usa 'HH:mm' per l'ora.\n"+ e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField altField;
    private javax.swing.JComboBox<String> areaDrop;
    private javax.swing.JComboBox<String> centriDrop;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton inserisci;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField massField;
    private javax.swing.JTextField noteAltitudine;
    private javax.swing.JTextField noteMassa;
    private javax.swing.JTextField notePrecipitazioni;
    private javax.swing.JTextField notePressione;
    private javax.swing.JTextField noteTemperatura;
    private javax.swing.JTextField noteUmidita;
    private javax.swing.JTextField noteVento;
    private javax.swing.JTextField precipitazioniField;
    private javax.swing.JTextField pressioneField;
    private javax.swing.JTextField temperaturaField;
    private javax.swing.JTextField timeField;
    private javax.swing.JLabel timestampLabel;
    private javax.swing.JTextField umiditaField;
    private javax.swing.JTextField ventoField;
    // End of variables declaration//GEN-END:variables
}
